name: Terraform

on:
  push:
    branches:
      - main

env:
  TF_BUCKET: poc-tef-state
  CLUSTER_NAME: poc
  AWS_REGION: us-east-2

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.tf_out.outputs.cluster_name }}
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: initialize terraform's state bucket
        id: s3
        run: >-
          aws s3api head-bucket
          --bucket=${{ env.TF_BUCKET }}
          --region ${{ env.AWS_REGION }}
          ||
          aws s3api create-bucket
          --bucket ${{ env.TF_BUCKET }}
          --region ${{ env.AWS_REGION }}
          --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.6"

      - id: init
        run: >-
          terraform init
          -backend-config="bucket=${{ env.TF_BUCKET }}"
          -backend-config="region=${{ env.AWS_REGION }}"

      - id: plan
        run: >-
          terraform plan
          -no-color
          -var "cluster_name=${{ env.CLUSTER_NAME }}"
          -var "region=${{ env.AWS_REGION }}"
          -out=tf-plan

      - id: apply
        run: terraform apply -no-color -auto-approve tf-plan

      - name: get cluster name
        id: tf_out
        run: |-
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT

  config:
    needs: terraform
    name: Config EKS cluster
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install ALB Ingress Controller Helm Chart
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          cluster-name: ${{ needs.terraform.outputs.cluster_name }}
          namespace: kube-system
          name: ingress
          chart-repository: https://aws.github.io/eks-charts
          chart-path: eks/aws-load-balancer-controller 
          version: 1.4.6
          values: >-
            autoDiscoverAwsRegion=true,autoDiscoverAwsVpcID=true
            --set clusterName=${{ needs.terraform.outputs.cluster_name }}

      - name: Set Datadog api-key Secret
        run: |-
          sed 's/_API_KEY_/${{ secrets.DATADOG_API_KEY }}/' datadog-config/templates/datadog-secret.yaml

      - name: Install Datadog Helm Chart
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          cluster-name: ${{ needs.terraform.outputs.cluster_name }}
          namespace: datadog
          name: datadog
          chart-path: ./datadog-config
